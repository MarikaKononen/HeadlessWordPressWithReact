{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nvar _this = this;\n\nimport React, { Component } from 'react';\nimport Navigation from './Navigation';\n/**\n * This utility function allows function calls to be debounced.\n * @param {Function} func Function that requires debouncing\n * @param {Number} wait Wait time in milliseconds between successive invocations\n */\n\nvar debounce = function debounce(func, wait) {\n  var timeout;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      return func.apply(_this, args);\n    }, wait);\n  };\n};\n\nvar NavContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NavContainer, _Component);\n\n  function NavContainer(props) {\n    var _this2;\n\n    _classCallCheck(this, NavContainer);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(NavContainer).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this2), \"handleScroll\", function () {\n      // + is unary operator, same as Number(window.scrollY)\n      var scrollPositionY = +window.scrollY;\n      return _this2.setState({\n        scrollPositionY: scrollPositionY\n      });\n    });\n\n    _this2.state = {\n      scrollPositionY: 0\n    };\n    return _this2;\n  }\n\n  _createClass(NavContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // 32 is the number of milliseconds to debounce\n      // I picked this because it's approx 1 frame (ie: 16.7ms)\n      // You'll want to modulate that to your taste.\n      // Add console.logs in handleScroll function to check if its flooding.\n      return window.addEventListener('scroll', debounce(this.handleScroll, 16));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      return window.removeEventListener('scroll', debounce(this.handleScroll, 16));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // !! coerces value to be a Boolean\n      // we want it to be true or false (true if scrollPositionY> 0)\n      // it works because scrollPositionY=== 0 is falsy\n      var isScrolling = !!this.state.scrollPositionY;\n      return React.createElement(\"div\", {\n        className: isScrolling ? 'sticky isScrolling' : 'sticky'\n      }, React.createElement(Navigation, {\n        isScrolling: isScrolling\n      }));\n    }\n  }]);\n\n  return NavContainer;\n}(Component);\n\nexport default NavContainer;","map":{"version":3,"sources":["/Users/marikakononen/Koodaus/KoodausProjektit/GitHub/HeadlessWordPressWithReact/components/NavContainer.js"],"names":["React","Component","Navigation","debounce","func","wait","timeout","args","clearTimeout","setTimeout","apply","NavContainer","props","scrollPositionY","window","scrollY","setState","state","addEventListener","handleScroll","removeEventListener","isScrolling"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA;;;;;;AAKA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAOC,IAAP,EAAgB;AAC/B,MAAIC,OAAJ;AACA,SAAO,YAAa;AAAA,sCAATC,IAAS;AAATA,MAAAA,IAAS;AAAA;;AAClBC,IAAAA,YAAY,CAACF,OAAD,CAAZ;AACAA,IAAAA,OAAO,GAAGG,UAAU,CAAC;AAAA,aAAML,IAAI,CAACM,KAAL,CAAW,KAAX,EAAiBH,IAAjB,CAAN;AAAA,KAAD,EAA+BF,IAA/B,CAApB;AACD,GAHD;AAID,CAND;;IAQMM,Y;;;;;AACJ,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,uFAAMA,KAAN;;AADiB,oEAmBJ,YAAM;AACnB;AACA,UAAMC,eAAe,GAAG,CAACC,MAAM,CAACC,OAAhC;AACA,aAAO,OAAKC,QAAL,CAAc;AAAEH,QAAAA,eAAe,EAAfA;AAAF,OAAd,CAAP;AACD,KAvBkB;;AAEjB,WAAKI,KAAL,GAAa;AACXJ,MAAAA,eAAe,EAAE;AADN,KAAb;AAFiB;AAKlB;;;;wCAEmB;AAClB;AACA;AACA;AACA;AACA,aAAOC,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkCf,QAAQ,CAAC,KAAKgB,YAAN,EAAoB,EAApB,CAA1C,CAAP;AACD;;;2CAEsB;AACrB,aAAOL,MAAM,CAACM,mBAAP,CAA2B,QAA3B,EAAqCjB,QAAQ,CAAC,KAAKgB,YAAN,EAAoB,EAApB,CAA7C,CAAP;AACD;;;6BAQQ;AACP;AACA;AACA;AACA,UAAME,WAAW,GAAG,CAAC,CAAC,KAAKJ,KAAL,CAAWJ,eAAjC;AACA,aACE;AAAK,QAAA,SAAS,EAAGQ,WAAD,GAAgB,oBAAhB,GAAuC;AAAvD,SACE,oBAAC,UAAD;AAAY,QAAA,WAAW,EAAEA;AAAzB,QADF,CADF;AAKD;;;;EApCwBpB,S;;AAuC3B,eAAeU,YAAf","sourcesContent":["import React, { Component } from 'react'\nimport Navigation from './Navigation'\n\n/**\n * This utility function allows function calls to be debounced.\n * @param {Function} func Function that requires debouncing\n * @param {Number} wait Wait time in milliseconds between successive invocations\n */\nconst debounce = (func, wait) => {\n  let timeout\n  return (...args) => {\n    clearTimeout(timeout)\n    timeout = setTimeout(() => func.apply(this, args), wait)\n  }\n}\n\nclass NavContainer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      scrollPositionY: 0,\n    }\n  }\n\n  componentDidMount() {\n    // 32 is the number of milliseconds to debounce\n    // I picked this because it's approx 1 frame (ie: 16.7ms)\n    // You'll want to modulate that to your taste.\n    // Add console.logs in handleScroll function to check if its flooding.\n    return window.addEventListener('scroll', debounce(this.handleScroll, 16))\n  }\n\n  componentWillUnmount() {\n    return window.removeEventListener('scroll', debounce(this.handleScroll, 16))\n  }\n\n  handleScroll = () => {\n    // + is unary operator, same as Number(window.scrollY)\n    const scrollPositionY = +window.scrollY\n    return this.setState({ scrollPositionY })\n  }\n\n  render() {\n    // !! coerces value to be a Boolean\n    // we want it to be true or false (true if scrollPositionY> 0)\n    // it works because scrollPositionY=== 0 is falsy\n    const isScrolling = !!this.state.scrollPositionY\n    return (\n      <div className={(isScrolling) ? 'sticky isScrolling' : 'sticky'}>\n        <Navigation isScrolling={isScrolling} />\n      </div>\n    )\n  }\n}\n\nexport default NavContainer;"]},"metadata":{},"sourceType":"module"}